#配置项目的数据源
spring:
  servlet:
    multipart:
      enabled: true
      maxFileSize: 50MB
      maxRequestSize: 50MB

  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/qy-im?useSSL=false&useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true
    username: root
    password: root

    # Druid连接池专属配置
    druid:
      # 1. 连接池核心参数
      initial-size: 5               # 初始化连接数（默认0）
      max-active: 20                # 最大连接数（默认8）
      min-idle: 5                   # 最小空闲连接数（默认0）
      max-wait: 60000               # 获取连接的最大等待时间（毫秒，默认-1表示无限等待）
      time-between-eviction-runs-millis: 60000  # 间隔多久检测空闲连接（毫秒）
      min-evictable-idle-time-millis: 300000    # 连接最小空闲时间（毫秒，超过则被回收）
      validation-query: SELECT 1    # 验证连接有效性的SQL（MySQL示例，其他数据库需调整）
      test-while-idle: true         # 空闲时是否验证连接（推荐true，避免连接失效）
      test-on-borrow: false         # 获取连接时是否验证（建议false，提高性能）
      test-on-return: false         # 归还连接时是否验证（建议false，提高性能）
      pool-prepared-statements: true  # 是否缓存PreparedStatement（PSCache）
      max-pool-prepared-statement-per-connection-size: 20  # 每个连接的PSCache大小

      # 2. 监控配置（StatViewServlet：Druid监控页面）
      stat-view-servlet:
        enabled: true               # 是否启用监控页面
        url-pattern: /druid/*       # 监控页面访问路径（默认/druid/*）
        login-username: admin       # 监控页面登录用户名（自定义）
        login-password: admin       # 监控页面登录密码（自定义）
        allow: 127.0.0.1,192.168.1.0/24  # 允许访问的IP（*表示所有）
        deny: 192.168.1.100         # 禁止访问的IP（优先级高于allow）
        reset-enable: false         # 是否允许重置统计数据（建议false，防止误操作）

      # 3. Web监控过滤器（WebStatFilter：监控Web应用的数据库访问）
      web-stat-filter:
        enabled: true               # 是否启用
        url-pattern: /*             # 过滤所有请求
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"  # 排除静态资源和监控页面
        session-stat-enable: true   # 是否监控Session
        session-stat-max-count: 100 # 最多监控100个Session
        profile-enable: true        # 是否监控Cookie

      # 4. 过滤器配置（可选，如防SQL注入的WallFilter）
      filters: stat,wall,log4j2    # 启用的过滤器（stat：统计；wall：防注入；log4j2：日志，需对应日志依赖）
      filter:
        wall:
          enabled: true
          config:
            multi-statement-allow: true  # 允许执行多语句SQL（谨慎开启）
            drop-table-allow: false      # 禁止删除表操作

  redis:
    host: 127.0.0.1
    port: 6379
    database: 1
    password: 123456

  mail:
    host: smtp.qq.com          # QQ 邮箱 SMTP 服务器地址
    port: 465                  # SMTP 服务端口（SSL）
    username: your_email@qq.com # 发件人邮箱（QQ邮箱地址）
    password: your_authorization_code # 授权码（非邮箱密码）
    protocol: smtp             # 邮件协议
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true           # 启用认证
          starttls.enable: true # 启用 TLS
          starttls.required: true
          ssl.enable: true      # 启用 SSL 加密

#防止redission启动报错
management:
  health:
    redis:
      enabled: false

mybatis-plus:
  global-config:
    db-config:
      id-type: assign_id
  configuration:
    # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # mapper
  mapper-locations:
    # *.xml的具体路径
    - classpath*:mapper/*.xml


minio:
  endpoint: http://127.0.0.1:9000 #内网地址
  domain: http://127.0.0.1:9000  #外网访问地址
  accessKey: admin
  secretKey: 12345678
  bucketName: qy-im
  imagePath: image
  filePath: file
  videoPath: video
  audioPath: audio

webrtc:
  max-channel: 9 # 多人通话最大通道数量，最大不能超过16,建议值:4,9,16
  iceServers:
    - urls: stun:stun.l.google.com:19302

jwt:
  accessToken:
    expireIn: 86400  #一天
    secret: MIIBIjANBgkq
  refreshToken:
    expireIn: 604800 #7天
    secret: IKDiqVmn0VFU

# 上传模式 可选 oss或local或qiniu或minio  （http://和最后的/一定不能去！！！）
upload:
  mode: local
  local:
    # nginx映射本地文件路径
    url: https://im.timemory.xyz/files/
    # 本地文件存储路径
    path: /app/qy-im/static/
  oss:
    url: http://Bucket域名/
    endpoint: OSS配置endpoint
    accessKeyId: OSS配置accessKeyId
    accessKeySecret: OSS配置accessKeySecret
    bucketName: OSS配置bucketName
  qiniu:
    # 域名/路径
    domain:
    # 公钥
    accessKey:
    # 私钥
    secretKey:
    # 存储空间名
    bucket:

#第三方配置信息
qq:
  app-id: appid
  check-token-url: https://graph.qq.com/oauth2.0/me?access_token={access_token}
  user-info-url: https://graph.qq.com/user/get_user_info?openid={openid}&access_token={access_token}&oauth_consumer_key={oauth_consumer_key}

#腾讯位置服务密钥
tencent:
  location:
    key:
    sk:

#高德地图应用
gaode:
  map:
    key:
    web-key:
    url: https://restapi.amap.com/v3/geocode/geo?


#天地图应用
tianditu:
  map:
    key:
    url: http://api.tianditu.gov.cn/geocoder?ds={"keyWord":%s}&tk=%s

image:
  detect:
    mode: baidu #

    baidu:
      ak:
      sk:
      detect-url: https://aip.baidubce.com/rest/2.0/solution/v1/img_censor/v2/user_defined?access_token=
      access-token-url: https://aip.baidubce.com/oauth/2.0/token?client_id=${image.detect.baidu.ak}&client_secret=${image.detect.baidu.sk}&grant_type=client_credentials